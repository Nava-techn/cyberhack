{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\cyberha\\\\frontend\\\\src\\\\components\\\\SectorDeck.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './SectorDeck.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SectorDeck = ({\n  onSelectSectors\n}) => {\n  _s();\n  const [showDeck, setShowDeck] = useState(false);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const modalRef = useRef(null);\n\n  // Importer les 10 cartes secteur (recto/verso)\n  const sectorCards = Array.from({\n    length: 10\n  }, (_, i) => ({\n    recto: require(`../assets/secteurs/secteur_${i + 1}_recto.png`),\n    verso: require(`../assets/secteurs/secteur_${i + 1}_verso.png`)\n  }));\n\n  // Fermer le deck quand on clique ailleurs\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        setShowDeck(false);\n      }\n    };\n    if (showDeck) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [showDeck]);\n  const handleDeckClick = () => {\n    setShowDeck(true);\n    setSelectedCards([]);\n  };\n  const handleCardClick = index => {\n    const newSelection = [...selectedCards];\n    const cardIndex = newSelection.findIndex(card => card.index === index);\n    if (cardIndex >= 0) {\n      newSelection.splice(cardIndex, 1);\n    } else if (newSelection.length < 5) {\n      newSelection.push({\n        index,\n        side: newSelection.length % 2 === 0 ? 'recto' : 'verso'\n      });\n    }\n    setSelectedCards(newSelection);\n  };\n\n  // Fonction pour définir le style CSS personnalisé pour le verso de la carte\n  const getCardStyle = index => {\n    const card = sectorCards[index];\n    return {\n      '--verso': `url(${card.verso})`\n    };\n  };\n  const confirmSelection = () => {\n    const selectedSectors = selectedCards.map(card => sectorCards[card.index][card.side]);\n    onSelectSectors(selectedSectors);\n    setShowDeck(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck-label\",\n      onClick: handleDeckClick,\n      children: \"Cartes Secteurs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), showDeck && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-selection-modal\",\n      ref: modalRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-grid\",\n        children: sectorCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-item ${selectedCards.some(c => c.index === index) ? 'selected' : ''}`,\n          onClick: () => handleCardClick(index),\n          style: getCardStyle(index),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.recto,\n            alt: `Secteur ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"confirm-btn\",\n        onClick: confirmSelection,\n        disabled: selectedCards.length !== 5,\n        children: \"Valider 5 cartes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(SectorDeck, \"aSB2I1aTUaih3NjnGxAWqr/TMuE=\");\n_c = SectorDeck;\nexport default SectorDeck;\nvar _c;\n$RefreshReg$(_c, \"SectorDeck\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","SectorDeck","onSelectSectors","_s","showDeck","setShowDeck","selectedCards","setSelectedCards","modalRef","sectorCards","Array","from","length","_","i","recto","require","verso","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","handleDeckClick","handleCardClick","index","newSelection","cardIndex","findIndex","card","splice","push","side","getCardStyle","confirmSelection","selectedSectors","map","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","some","c","style","src","alt","disabled","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/cyberha/frontend/src/components/SectorDeck.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './SectorDeck.css';\r\n\r\nconst SectorDeck = ({ onSelectSectors }) => {\r\n  const [showDeck, setShowDeck] = useState(false);\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const modalRef = useRef(null);\r\n\r\n  // Importer les 10 cartes secteur (recto/verso)\r\n  const sectorCards = Array.from({ length: 10 }, (_, i) => ({\r\n    recto: require(`../assets/secteurs/secteur_${i+1}_recto.png`),\r\n    verso: require(`../assets/secteurs/secteur_${i+1}_verso.png`)\r\n  }));\r\n\r\n  // Fermer le deck quand on clique ailleurs\r\n  useEffect(() => {\r\n    const handleClickOutside = (e) => {\r\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\r\n        setShowDeck(false);\r\n      }\r\n    };\r\n\r\n    if (showDeck) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [showDeck]);\r\n\r\n  const handleDeckClick = () => {\r\n    setShowDeck(true);\r\n    setSelectedCards([]);\r\n  };\r\n\r\n  const handleCardClick = (index) => {\r\n    const newSelection = [...selectedCards];\r\n    const cardIndex = newSelection.findIndex(card => card.index === index);\r\n\r\n    if (cardIndex >= 0) {\r\n      newSelection.splice(cardIndex, 1);\r\n    } else if (newSelection.length < 5) {\r\n      newSelection.push({\r\n        index,\r\n        side: newSelection.length % 2 === 0 ? 'recto' : 'verso'\r\n      });\r\n    }\r\n\r\n    setSelectedCards(newSelection);\r\n  };\r\n\r\n  // Fonction pour définir le style CSS personnalisé pour le verso de la carte\r\n  const getCardStyle = (index) => {\r\n    const card = sectorCards[index];\r\n    return {\r\n      '--verso': `url(${card.verso})`\r\n    };\r\n  };\r\n\r\n  const confirmSelection = () => {\r\n    const selectedSectors = selectedCards.map(card => \r\n      sectorCards[card.index][card.side]\r\n    );\r\n    onSelectSectors(selectedSectors);\r\n    setShowDeck(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"deck-label\" onClick={handleDeckClick}>\r\n        Cartes Secteurs\r\n      </div>\r\n\r\n      {showDeck && (\r\n        <div \r\n          className=\"card-selection-modal\"\r\n          ref={modalRef}\r\n        >\r\n          <div className=\"card-grid\">\r\n            {sectorCards.map((card, index) => (\r\n              <div\r\n                key={index}\r\n                className={`card-item ${\r\n                  selectedCards.some(c => c.index === index) ? 'selected' : ''\r\n                }`}\r\n                onClick={() => handleCardClick(index)}\r\n                style={getCardStyle(index)}\r\n              >\r\n                <img\r\n                  src={card.recto}\r\n                  alt={`Secteur ${index + 1}`}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button \r\n            className=\"confirm-btn\"\r\n            onClick={confirmSelection}\r\n            disabled={selectedCards.length !== 5}\r\n          >\r\n            Valider 5 cartes\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SectorDeck;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}