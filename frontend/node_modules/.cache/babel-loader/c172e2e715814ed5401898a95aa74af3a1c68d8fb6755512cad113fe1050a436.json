{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\cyberha\\\\frontend\\\\src\\\\components\\\\AttackDeck.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './AttackDeck.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AttackDeck = ({\n  onSelectAttacks\n}) => {\n  _s();\n  const [showDeck, setShowDeck] = useState(false);\n  const [selectedAttacks, setSelectedAttacks] = useState([]);\n  const modalRef = useRef(null);\n\n  // Ajouter la gestion du clic extérieur\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        setShowDeck(false);\n      }\n    };\n    if (showDeck) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [showDeck]);\n\n  // Créer le deck de cartes d'attaque\n  const createAttackDeck = () => {\n    let deck = [];\n    // Créer 15 cartes d'attaque (ajustez le nombre selon vos besoins)\n    for (let i = 1; i <= 10; i++) {\n      deck.push({\n        id: i,\n        image: require(`../assets/attaques/attaque-${i}-recto.png`),\n        verso: require(`../assets/attaques/attaque-${i}-verso.png`)\n      });\n    }\n    // Mélanger le deck\n    return deck.sort(() => Math.random() - 0.5);\n  };\n  const [attackDeck] = useState(createAttackDeck());\n  const handleAttackClick = index => {\n    if (selectedAttacks.length < 5) {\n      setSelectedAttacks([...selectedAttacks, attackDeck[index]]);\n    }\n  };\n  const confirmSelection = () => {\n    if (selectedAttacks.length === 5) {\n      onSelectAttacks(selectedAttacks);\n      setShowDeck(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck-label\",\n      onClick: () => setShowDeck(true),\n      children: \"Cartes Attaques\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), showDeck && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-selection-modal\",\n        ref: modalRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selection-info\",\n          children: [\"S\\xE9lectionnez 5 cartes d'attaque (\", selectedAttacks.length, \"/5)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grid\",\n          children: attackDeck.slice(0, 15).map((attack, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card-item ${selectedAttacks.includes(attack) ? 'selected' : ''}`,\n            onClick: () => handleAttackClick(index),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-inner\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-front\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: attack.image,\n                  alt: `Attaque ${index + 1} recto`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-back\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: attack.verso,\n                  alt: `Attaque ${index + 1} verso`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-btn\",\n          onClick: confirmSelection,\n          disabled: selectedAttacks.length !== 5,\n          children: \"Valider la s\\xE9lection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_s(AttackDeck, \"WOF0O/gMBiwOwotOqYp5d2AMwTE=\");\n_c = AttackDeck;\nexport default AttackDeck;\nvar _c;\n$RefreshReg$(_c, \"AttackDeck\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","AttackDeck","onSelectAttacks","_s","showDeck","setShowDeck","selectedAttacks","setSelectedAttacks","modalRef","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","createAttackDeck","deck","i","push","id","image","require","verso","sort","Math","random","attackDeck","handleAttackClick","index","length","confirmSelection","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","slice","map","attack","includes","src","alt","disabled","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/cyberha/frontend/src/components/AttackDeck.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './AttackDeck.css';\r\n\r\nconst AttackDeck = ({ onSelectAttacks }) => {\r\n  const [showDeck, setShowDeck] = useState(false);\r\n  const [selectedAttacks, setSelectedAttacks] = useState([]);\r\n  const modalRef = useRef(null);\r\n\r\n  // Ajouter la gestion du clic extérieur\r\n  useEffect(() => {\r\n    const handleClickOutside = (e) => {\r\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\r\n        setShowDeck(false);\r\n      }\r\n    };\r\n\r\n    if (showDeck) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [showDeck]);\r\n\r\n  // Créer le deck de cartes d'attaque\r\n  const createAttackDeck = () => {\r\n    let deck = [];\r\n    // Créer 15 cartes d'attaque (ajustez le nombre selon vos besoins)\r\n    for (let i = 1; i <= 10; i++) {\r\n      deck.push({\r\n        id: i,\r\n        image: require(`../assets/attaques/attaque-${i}-recto.png`),\r\n        verso: require(`../assets/attaques/attaque-${i}-verso.png`)\r\n      });\r\n    }\r\n    // Mélanger le deck\r\n    return deck.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  const [attackDeck] = useState(createAttackDeck());\r\n\r\n  const handleAttackClick = (index) => {\r\n    if (selectedAttacks.length < 5) {\r\n      setSelectedAttacks([...selectedAttacks, attackDeck[index]]);\r\n    }\r\n  };\r\n\r\n  const confirmSelection = () => {\r\n    if (selectedAttacks.length === 5) {\r\n      onSelectAttacks(selectedAttacks);\r\n      setShowDeck(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"deck-label\" onClick={() => setShowDeck(true)}>\r\n        Cartes Attaques\r\n      </div>\r\n\r\n      {showDeck && (\r\n        <>\r\n          <div className=\"modal-overlay\" />\r\n          <div className=\"card-selection-modal\" ref={modalRef}>\r\n            <div className=\"selection-info\">\r\n              Sélectionnez 5 cartes d'attaque ({selectedAttacks.length}/5)\r\n            </div>\r\n            \r\n            <div className=\"card-grid\">\r\n              {attackDeck.slice(0, 15).map((attack, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`card-item ${\r\n                    selectedAttacks.includes(attack) ? 'selected' : ''\r\n                  }`}\r\n                  onClick={() => handleAttackClick(index)}\r\n                >\r\n                  <div className=\"card-inner\">\r\n                    <div className=\"card-front\">\r\n                      <img src={attack.image} alt={`Attaque ${index + 1} recto`} />\r\n                    </div>\r\n                    <div className=\"card-back\">\r\n                      <img src={attack.verso} alt={`Attaque ${index + 1} verso`} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            <button \r\n              className=\"confirm-btn\"\r\n              onClick={confirmSelection}\r\n              disabled={selectedAttacks.length !== 5}\r\n            >\r\n              Valider la sélection\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AttackDeck; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}